{
  "title": "Include",
  "@id": "stencila:Include",
  "category": "metadata",
  "description": "A directive to include content from an external source (e.g. file, URL) or content.\n",
  "role": "secondary",
  "status": "unstable",
  "extends": "Entity",
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The name of the type.",
      "type": "string",
      "enum": [
        "Include"
      ],
      "default": "Include",
      "from": "Entity"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item.",
      "type": "string",
      "from": "Entity"
    },
    "meta": {
      "@id": "stencila:meta",
      "description": "Metadata associated with this item.",
      "type": "object",
      "from": "Entity"
    },
    "source": {
      "@id": "stencila:source",
      "description": "The source of the content, a URL or file path, or the content itself.",
      "type": "string",
      "from": "Include"
    },
    "format": {
      "@id": "schema:encodingFormat",
      "aliases": [
        "encoding",
        "encodingFormat"
      ],
      "description": "Media type, typically expressed using a MIME format, of the source content.",
      "type": "string",
      "from": "Include"
    },
    "content": {
      "@id": "stencila:content",
      "description": "The content to be included.",
      "$comment": "Currently assumes that included content will be block content.\nThis presumes that there will be limited instance where a user would\nwant to use an `Include` node to transclude inline content.\n",
      "type": "array",
      "items": {
        "$ref": "BlockContent.schema.json"
      },
      "from": "Include"
    }
  },
  "required": [
    "type",
    "source"
  ],
  "file": "Include.schema.yaml",
  "children": [],
  "descendants": [],
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://schema.stenci.la/v0/Include.schema.json",
  "source": "https://github.com/stencila/schema/blob/master/Include.schema.yaml",
  "type": "object",
  "propertyAliases": {
    "encoding": "format",
    "encodingFormat": "format"
  },
  "additionalProperties": false
}
